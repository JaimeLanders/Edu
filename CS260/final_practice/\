#include "table.h"

//Please put the impelementation of the required functions here

bool addNode (node * root, int numIn)
{
//	cout << "\naddNode " << endl;

	node * nodeStatus = NULL;

	nodeStatus = addNodeHelper(root, numIn);

	if (nodeStatus)
		return true;
	else
		return false;
}

node* addNodeHelper (node *& nodeIn, int numIn)
{
//	cout << "\naddNodeHelper " << endl;
//	cout << "nodeIn = " << nodeIn << endl;
//	cout << "numIn = " << numIn << endl;

	int compData = 0;

	if (nodeIn)
	{	
//		cout << "nodeIn " << endl;
//		cout << "nodeIn->data = " << nodeIn->data << endl;

		compData = nodeIn->data;
//		cout << "compData = " << compData << endl;

		if (numIn < compData)
		{ 
//			cout << "left " << endl;
			nodeIn->left = addNodeHelper(nodeIn->left, numIn);
		}
		else// if(numIn >= compData)
		{
//			cout << "right " << endl;
			nodeIn->right = addNodeHelper(nodeIn->right, numIn);
		}
	}
	else
	{
//		cout << "leaf " << endl;
		nodeIn = new node;
		nodeIn->data = numIn;
		nodeIn->left = NULL;
		nodeIn->right = NULL;
		return nodeIn;
	}

	return nodeIn;
}

int numberOfNodes(node * root)
{
//	cout << "\nnumberOfNode " << endl;
//	cout << "root = " << root << endl;

	int nodeCount = 0;

	return numberOfNodesHelper(root, nodeCount);
}

int numberOfNodesHelper(node * nodeIn, int& nodeCountIn)
{
//	cout << "\nnumberOfNode " << endl;
//	cout << "nodeIn = " << nodeIn << endl;
//	cout << "nodeCountIn = " << nodeCountIn << endl;

	if ( nodeIn)
	{
//		cout << "nodeIn " << endl;

		nodeCountIn++;
//		cout << "nodeCount = " << nodeCount << endl;

		numberOfNodesHelper(nodeIn->left, nodeCountIn);

		numberOfNodesHelper(nodeIn->right, nodeCountIn);
	}

	return nodeCountIn;
}

bool removeSmallest(node *& root)
{
//	cout << "\nremoveSmallest " << endl;
//	cout << "root = " << root << endl;
//	cout << "root->data = " << root->data << endl;

//	cout << "root return = " << root << endl;
	removeSmallestHelper(root);
}

bool removeSmallestHelper(node *& nodeIn)
//node* removeSmallestHelper(node *& nodeIn)
{
//	cout << "\nremoveSmallestHelper " << endl;
//	cout << "nodeIn = " << nodeIn << endl;
//	cout << "nodeIn->data = " << nodeIn->data << endl;

	node * temp = NULL;

	if (nodeIn)
	{
		if (nodeIn->left)
		{
//			cout << "left " << endl;
			return removeSmallestHelper(nodeIn->left);
		}
		else if (nodeIn->right)
		{
//			cout << "right child "  << endl;
			temp = nodeIn->right;
			nodeIn->data = temp->data;
			nodeIn->left = temp->left;
			nodeIn->right = temp->right;
			delete temp;
			temp = NULL;
			return true;	
//			return nodeIn;	
		}
		else
		{
//			cout << "leaf " << endl;
			delete nodeIn;
			nodeIn = NULL;
			return true;	
//			return nodeIn;
		}
	}
	else
		return false;
//		return NULL;
}

int removeEven(node *& root)
{
//	cout << "\nremoveEven " << endl;
//	cout << "root = " << root << endl;

	int nodesRemoved = 0;

	return removeEvenHelper(root, nodesRemoved);
//	cout << "nodesRemove return = " << nodesRemoved << endl;
}


int removeEvenHelper(node *& nodeIn, int& nodesRemovedIn)
{
//	cout << "\nremoveEvenHelper " << endl;
//	cout << "nodeIn = " << nodeIn << endl;
//	cout << "nodesRemovedIn = " << nodesRemovedIn << endl;

	node * temp = NULL;

	if (nodeIn) 
	{
//		cout << "nodeIn = " << nodeIn << endl;
//		cout << "nodeIn->data = " << nodeIn->data << endl;

		if (nodeIn->left)
		{
//			cout << "Going left " << endl;
			removeEvenHelper(nodeIn->left, nodesRemovedIn);
		}

		if (nodeIn->right)
		{
//			cout << "Going right " << endl;
			removeEvenHelper(nodeIn->right, nodesRemovedIn);
		}

		if (nodeIn->data % 2 == 0)
		{
//			cout << "nodeIn & even " << endl;

			nodesRemovedIn++;
//			cout << "nodesRemovedIn " << nodesRemovedIn << endl;

//			deleteNode(nodeIn);
			nodeIn = deleteNode(nodeIn);
		}
	}

	return nodesRemovedIn;
}

node * deleteNode(node *& nodeIn)
{
//	cout << "\ndeleteNode " << endl;
//	cout << "nodeIn = " << nodeIn << endl;
//	cout << "nodeIn->data = " << nodeIn->data << endl;

	node * temp = NULL;
	
	if (!nodeIn->left && !nodeIn->right)
	{
//		cout << "leaf " << endl;
		delete nodeIn;
		nodeIn = NULL;
		return nodeIn; 
	}
	else if (!nodeIn->right)
	{
//		cout << "left child only " << endl;

		temp = nodeIn;
		nodeIn = nodeIn->left;
		temp->left = NULL;
		delete temp;
		return nodeIn; 
	}
	else if (!nodeIn->left)
	{
//		cout << "right child only "  << endl;

		temp = nodeIn;
		nodeIn = nodeIn->right;
		temp->right = NULL;
		delete temp;
		return nodeIn; 
	}
	else
	{
//		cout << "+++left and right children+++ " << endl;

		node * currNode = nodeIn->right;
		node * prevNode = NULL; 

//		cout << "check " << endl;

		while (currNode->left)
		{
//			cout << "currNode->left " << endl;
			prevNode = currNode;
			currNode = currNode->left;
		}	

		nodeIn->data = currNode->data;
//		cout << "nodeIn->data = currNode->data = " << currNode->data << endl;

		if (!prevNode)
			nodeIn->right = currNode->right;
		else
			prevNode->left = currNode->right;

		currNode->right = NULL;
		delete currNode;
		return nodeIn; 
	}
}
