// Numbers from command line arguments are sent to child process
// from parent process one at a time through pipe.
//
// Child process adds up numbers sent through pipe.
//
// Child process returns sum of numbers to parent process.
//
// Parent process prints sum of numbers.

#include <stdio.h>
#include <stdlib.h>
#include <string.h> // Test
#include <unistd.h>
#include <wait.h>

int main(int argc, char **argv)
{
    printf("\nmain argc = %d\n", argc); // Temp
    for (int i = 1; i < argc; i++) // Temp
    {
        printf("main i = %d\n", i); 
        printf("main argv[i] = %s\n", argv[i]); 
    }
    printf("\n"); // Temp

    pid_t pid;
    int pipeDes[2];

	// set up pipe
    pipe (pipeDes);
//    int pipe (int pipeDes[2]);

	// call fork()
    pid_t fork(void); 

	printf("CS201 - Assignment 3 Regular - Jaime Landers\n");

	if (!fork())
    {
		// -- running in child process --
        
        printf("\n\nchild process\n"); // Temp
//        int count = 0;
		int sum = 0;
//        int tempIn = 0;
        int tempIn[10];
//        char tempIn[30]; // Test

		// Receive characters from parent process via pipe
		// one at a time, and count them.
        
//        close (1); // Nedded?
//        close (pipeDes[1]); // Nedded?

//        count = read (pipeDes[0], &tempIn, 4); 
//        read (pipeDes[0], &tempIn, 4); 

//        printf("child tempIn = %d\n", tempIn); // Temp
//        printf("count = %d\n", count); // Temp

        for (int i = 0; i < argc - 1; i++)
        {
//            read (pipeDes[0], &tempIn, 4); 
            read (pipeDes[0], &tempIn[i], 4); 
            printf("child i = %d\n", i);
//            printf("child tempIn[i] = %d\n", tempIn); // Temp
            printf("child tempIn[i] = %d\n", tempIn[i]); // Temp
//            sum = sum + tempIn;
            sum = sum + (int) tempIn[i];
            printf("child sum = %d\n", sum); // Temp 
        }

//        sum = sum + tempIn;

//        read (pipeDes[0], tempIn, 4); // Test 

/*        for(int i = 1; i < argc; i++) // Test
        {
            printf("child i = %d\n", i);
            printf("child tempIn[i] = %s\n", tempIn[i]);
        }
*/
//        printf("child tempIn = %s\n", tempIn); // Test 

		// Return sum of numbers.
        
        printf("child sum total = %d\n", sum); // Temp 

        return sum;
//		return 69; // Test
    }
	else 
    {
		// -- running in parent process --

        printf("\n\nparent process \n"); // Temp

        int status = 0; 
		int sum = 0;
        int tempOut[10];
//        int tempOut = 0;

		// Send numbers (datatype: int, 4 bytes) from command line arguments
		// starting with argv[1] one at a time through pipe to child process.
        
//        close (1); // Nedded?
//        close (pipeDes[1]); // Nedded?

        for (int i = 1; i < argc; i++)
        {
            printf("parent i = %d\n", i); // Temp
            tempOut[i - 1] = atoi(argv[i]);
//            tempOut = atoi(argv[i]);

            printf("parent tempOut = %d\n", tempOut[i - 1]); // Temp
//            printf("parent argv[i] = %s\n", argv[i]); // Temp

            write(pipeDes[1], &tempOut, 4);

//            write(pipeDes[1], "test", 5); // Test
//            write(pipeDes[1], argv[i], strlen(argv[i]));
        }

		// Wait for child process to return. Reap child process.
		// Receive sum of numbers via the value returned when
		// the child process is reaped.
        
        wait(NULL); 
//        sum = wait(NULL); 
//        waitpid(-1, &status, 0);
//        sum = (int*) argv[1] + (int*) argv[2];

		printf("\nparent sum = %d\n\n", sum); // Temp
//        printf("\n"); // Temp
        
    	return 0;
	}
}
