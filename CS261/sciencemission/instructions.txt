** Make sure you read the background.txt file in order to understand what this
assignment is asking for. **

======================================================================
Assignment Overview
======================================================================

For this assignment you are going to write a program to perform various
science missions on the mysterious cloud the Enterprise encountered. Data has
provided you with the parameters for the different probes that he wants you to
submit (probedata.txt).  Your program will be written in Java.  It will read
the file containing the mission parameters, create the probes, launch them,
and report the results.  The result output should match the sample output
provided (expected.txt).

Here is a copy of the expected output for the given probedata.txt file:

Launching probe Alpha
------------------------------------------------
Probe Alpha starting
Sensor readings before emitting
  Last reading for DILITHIUM_VAPOR: 0.002
  Last reading for TRACE_TRILITHIUM_PARTICULATE: 0.045
  Last reading for HEXAFLOURINE_GAS: 7.2E-4
  Last reading for HYDRAZINE: 1.0E-6
  Emitting a burst of 0.5units of NITRIUM_GAS
Sensor readings after emitting
  Last reading for DILITHIUM_VAPOR: 0.0018000000000000002
  Last reading for TRACE_TRILITHIUM_PARTICULATE: 0.045
  Last reading for HEXAFLOURINE_GAS: 6.48E-4
  Last reading for HYDRAZINE: 9.0E-7
Recalling probe Alpha
Launching probe Beta
------------------------------------------------
Probe Beta starting
Sensor readings before emitting
  Last reading for DILITHIUM_VAPOR: 0.0018000000000000002
  Last reading for TRACE_TRILITHIUM_PARTICULATE: 0.045
  Last reading for HEXAFLOURINE_GAS: 6.48E-4
  Last reading for HYDRAZINE: 9.0E-7
  Emitting a burst of 0.5units of NITRIUM_GAS
Sensor readings after emitting
  Last reading for DILITHIUM_VAPOR: 0.0016200000000000001
  Last reading for TRACE_TRILITHIUM_PARTICULATE: 0.045
  Last reading for HEXAFLOURINE_GAS: 5.832000000000001E-4
  Last reading for HYDRAZINE: 8.1E-7
Recalling probe Beta
Launching probe Gamma
------------------------------------------------
Probe Gamma starting
Sensor readings before emitting
  Last reading for NITRIUM_GAS: 1.1
  Last reading for TRACE_TRILITHIUM_PARTICULATE: 0.045
  Last reading for HEXAFLOURINE_GAS: 5.832000000000001E-4
  Last reading for HYDRAZINE: 8.1E-7
  Emitting a burst of 0.001units of PROTOMATTER_DENSITY
  Emitting a burst of 1.0units of HEXAFLOURINE_GAS
  Emitting a burst of 0.5units of TRACE_TRILITHIUM_PARTICULATE
Sensor readings after emitting
  Last reading for NITRIUM_GAS: 1.102299198
  Last reading for TRACE_TRILITHIUM_PARTICULATE: 0.21066666666666667
  Last reading for HEXAFLOURINE_GAS: 1.0495832
  Last reading for HYDRAZINE: 0.049000810000000006
Recalling probe Gamma

======================================================================
Assignment Implementation Details
======================================================================

This program will require several classes.  You are also free to create
additional classes as you see fit.

ScienceMissionMain

    This class contains your main method. I provided this
    for you so you don't need to write it.

ElementType

    This is an enumerated type that contains a value for each of the different
    types of elements that this science mission is concerned with.  These
    elements are:

    - DILITHIUM_VAPOR
    - TRACE_TRILITHIUM_PARTICULATE
    - PROTOMATTER_DENSITY
    - NITRIUM_GAS
    - HEXAFLOURINE_GAS
    - HYDRAZINE

    The enumerated type tokens should be in all caps.

Sensor

    This class is a sensor.  Sensor objects are meant to take readings from
    the environment.  Each sensor object is for a single element type (from
    the ElementType enumerated type) and contains a current value of that
    element.  The values should be of type double.  In addition, each Sensor
    object starts with an initial value.  Hint: this means that the Sensor
    class constructor needs to take in two parameters: ElementType type,
    double initialValue. 

Emitter

    This class is an emitter.  Emitter objects are used to emit bursts of
    different types of elements. Each emitter object is for a single element
    type (from the ElementType enumerated type) and contains a value (type
    double) that represents the amount of the given element that is emitted
    when the emitter "emits".

Probe

    This class is a probe. Each probe contains a list of sensors and emitters.
    There is no limit to the number of sensors and emitters that a probe can
    contain.  A probe does three main actions: launch, activate, recall.
    Launching and recalling print messages to indicate that the probe is
    launching or recalling.  The activate action has three phases.
    
    - Phase 1: pre-reading -- iterate through all of the sensors and do a reading of the environment.
    - Phase 2: emitting -- iterate through all of the emitters and call emit() on them.
    - Phase 3: post-reading -- iterate through all of the sensors and do a reading of the environment.

    Use the example output to understand how the output should be generated.

ScienceMission

    The ScienceMission class contains a list of probes.  During contruction of
    a ScienceMission object all of the probes are created using the mission
    parameters data provided in a file.  The ScienceMission needs two methods
    (you can add more if needed).  The first is the constructor.  This needs
    to take in a string parameter called "filename" that contains the mission
    data.  The second is "startMission(Environment env)".  This method runs
    the mission.  Running a mission requires iterating over the list of all of
    the probes and calling launch, activate, recall on each probe (one at a
    time).

Environment

    The Environment class models the gaseous cloud environment.  I have
    provided the class for you to use as is.  You shouldn't need to modify it.
    Just include this class source code in your project.

======================================================================
New Concepts and Classes
======================================================================

This assignment introduces a few new concepts and classes that you will need
to learn.

Reading files

    The probe data is stored in a text file that is passed into the
    ScienceMission constructor.  Your program needs to be able to read the
    data from that file.  The best classes for this are the File and
    BufferedReader classes.  You can get a general idea of how file I/O works
    be reviewing the file reading code from the Missioncount assignment
    (previous).  The format of the data in the data file is described in a
    section below.

String processing

    This assignment relies on a little bit of string processing while reading
    the data file. The data file format is simple enough that you can probably
    use just the String.equals() method.  You will want to use String.trim()
    to clean up the data as you read it in.

Enumerated types

    This assignment requires the use of enumerated types for the element type.
    It also requires converting enumerated types to strings to display the
    value and from strings when reading the data file.  There are several
    places online that describe how to do this.  Here is one link with some
    good information: http://stackoverflow.com/questions/604424/convert-a-string-to-an-enum-in-java.

======================================================================
Data File Format
======================================================================

The data file contains probe data for an unspecified number of probes.  The
data for each probe consists of the probe name (on a single line) followed by
sensor and emitter data for that problem.  The keyword "END" is used to
indicate the end of sensor/emitter data for a given probe.  All data is
line-based.  The data file follows this format:


<probe name>                        (the name of a probe)
SENSOR|EMITTER                      (SENSOR or EMITTER)
<type>                              (the element type)
<value>                             (the initial value for a sensor or emit value for an emitter)

... repeat the above three lines for each sensor or emitter in the probe ...

END                                 (the keyword END to mark the end of data for this probe)
    
... repeat probe name and new probe data for additional probes in this file ...  


Look at the probedata.txt file that is supplied with the assignment to
understand the data.

======================================================================
Code To Start With
======================================================================

This assignment provides a you with a .zip file containing the code you can
start with. There is the ScienceMissionMain class which contains the main
method.  You probably don't need to modify it.  There is also the Environment
class.  You shouldn't need to modify the Environment class at all.

======================================================================
JAR Files
======================================================================

Java executables are packaged as JAR files. A JAR file is actually a Zip
file. Once you're ready to submit your work, you will need to create a JAR
file containing your code.

======================================================================
Testing Your Code
======================================================================

This assignment comes with a probedata.txt file. When your program is working
correctly it will generate the exact same output as in the expected.txt file.

======================================================================
Assignment Specific Grading Items
======================================================================

The following items are specific grading items you should pay attention to
(see the general course information about how programs are graded for more
information).

- The program fails to use an enumerated type for element type
- The program reads all of the probedata.txt in the ScienceMission class
  instead of having each probe, sensor, and emitter read it's own data
- The program fails to use generic types

